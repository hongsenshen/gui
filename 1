import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                               QLineEdit, QPushButton, QLabel, QTabWidget, QFrame, QTableWidget, QTableWidgetItem,
                               QComboBox, QRadioButton, QCheckBox, QScrollArea, QMessageBox, QSpacerItem, QMenu)
from PySide6.QtGui import QPalette, QColor, QFont, QIcon
from PySide6.QtCore import Qt, QSize, QEvent

# 自定义按钮类，支持悬浮和点击弹出菜单
class UserButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.menu = QMenu(self)
        self.menu.setStyleSheet("""
            QMenu {
                border: 1px solid #ced4da;
                border-radius: 5px;
                background-color: #ffffff;
                padding: 5px;
                box-shadow: 2px 2px 10px #d1d9e6;
            }
            QMenu::item {
                padding: 5px 20px;
                color: #212529;
            }
            QMenu::item:selected {
                background-color: #007bff;
                color: white;
            }
            QMenu::separator {
                height: 1px;
                background: #ced4da;
                margin: 5px 0;
            }
        """)
        self.setMenu(self.menu)

    def enterEvent(self, event):
        # 鼠标悬浮时弹出菜单
        self.showMenu()
        super().enterEvent(event)

class QueryClientApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("信息查询客户端")
        self.setFixedSize(400, 300)
        
        # 设置图标
        if os.path.exists("custom.png"):
            self.setWindowIcon(QIcon("custom.png"))
        
        self.current_user = None
        self.setup_login_window()
        
    def setup_login_window(self):
        login_widget = QWidget()
        layout = QVBoxLayout()
        
        # 添加顶部填充以垂直居中
        layout.addStretch()
        
        # 标题
        title = QLabel("信息查询系统")
        title.setFont(QFont("Helvetica", 20, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #343a40;")
        layout.addWidget(title)
        
        # 用户名和密码布局，使用 QFormLayout 上下对齐，外层 QHBoxLayout 水平居中
        form_frame = QFrame()
        form_layout = QFormLayout()
        form_layout.setSpacing(15)
        form_layout.setLabelAlignment(Qt.AlignRight)
        
        self.username_entry = QLineEdit()
        self.username_entry.setFixedWidth(200)
        self.username_entry.setStyleSheet("""
            QLineEdit {
                border: 1px solid #ced4da;
                border-radius: 5px;
                padding: 5px;
                background-color: #ffffff;
                box-shadow: 2px 2px 5px #d1d9e6 inset;
            }
            QLineEdit:focus {
                border: 1px solid #007bff;
            }
        """)
        form_layout.addRow("用户名:", self.username_entry)
        
        self.password_entry = QLineEdit()
        self.password_entry.setEchoMode(QLineEdit.Password)
        self.password_entry.setFixedWidth(200)
        self.password_entry.setStyleSheet("""
            QLineEdit {
                border: 1px solid #ced4da;
                border-radius: 5px;
                padding: 5px;
                background-color: #ffffff;
                box-shadow: 2px 2px 5px #d1d9e6 inset;
            }
            QLineEdit:focus {
                border: 1px solid #007bff;
            }
        """)
        form_layout.addRow("密码:", self.password_entry)
        
        form_frame.setLayout(form_layout)
        
        # 水平居中
        form_hbox = QHBoxLayout()
        form_hbox.addStretch()
        form_hbox.addWidget(form_frame)
        form_hbox.addStretch()
        layout.addLayout(form_hbox)
        
        # 添加固定间距，增大按钮与密码行的距离
        layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Fixed))
        
        # 登录按钮
        login_button = QPushButton("登录")
        login_button.setFixedWidth(150)
        login_button.setStyleSheet("""
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #4dabf7, stop:1 #339af0);
                color: white;
                border-radius: 5px;
                padding: 8px;
                font-size: 14px;
                box-shadow: 2px 2px 5px #b8c1cc;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #339af0, stop:1 #228be6);
            }
        """)
        login_button.clicked.connect(self.login)
        layout.addWidget(login_button, alignment=Qt.AlignHCenter)
        
        # 添加底部填充以垂直居中
        layout.addStretch()
        
        login_widget.setLayout(layout)
        self.setCentralWidget(login_widget)
        
    def login(self):
        username = self.username_entry.text()
        password = self.password_entry.text()
        if username and password:
            self.current_user = username
            self.show_main_window()
        else:
            QMessageBox.critical(self, "登录失败", "请输入用户名和密码")
            
    def show_main_window(self):
        self.setFixedSize(900, 600)
        
        main_widget = QWidget()
        layout = QVBoxLayout()
        
        # 用户信息（右上角使用 UserButton）
        user_frame = QFrame()
        user_layout = QHBoxLayout()
        
        self.user_button = UserButton(self.current_user, self)
        self.user_button.setStyleSheet("""
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e9ecef, stop:1 #d3d7db);
                color: #212529;
                border: 1px solid #ced4da;
                border-radius: 8px;
                padding: 5px 15px;
                font-size: 14px;
                font-weight: bold;
                box-shadow: 2px 2px 5px #b8c1cc;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #cce5ff, stop:1 #a3cfff);
            }
        """)
        self.user_button.setFixedWidth(150)
        
        # 添加菜单项
        self.user_button.menu.addAction("退出登录", self.logout)
        self.user_button.menu.addSeparator()
        self.user_button.menu.addAction("关于我们", lambda: QMessageBox.information(self, "关于我们", "信息查询客户端 v1.0\n开发团队: xAI"))
        self.user_button.menu.addAction("设置", lambda: QMessageBox.information(self, "设置", "设置功能待开发"))
        
        user_layout.addStretch()
        user_layout.addWidget(self.user_button)
        user_frame.setLayout(user_layout)
        layout.addWidget(user_frame)
        
        # Tab 切换
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 0px;
            }
            QTabBar::tab {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e9ecef, stop:1 #d3d7db);
                color: #212529;
                padding: 10px 20px;
                font: bold 12px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                margin-right: 2px;
            }
            QTabBar::tab:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #007bff, stop:1 #0056b3);
                color: white;
            }
            QTabBar::tab:hover:!selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #cce5ff, stop:1 #a3cfff);
            }
        """)
        self.tabs.addTab(QWidget(), "CPU名称查询")
        self.tabs.addTab(QWidget(), "CPU规格参数查询")
        self.tabs.currentChanged.connect(self.on_tab_changed)
        layout.addWidget(self.tabs)
        
        # 内容区域
        self.content_widget = QWidget()
        self.content_layout = QHBoxLayout()
        self.content_widget.setLayout(self.content_layout)
        layout.addWidget(self.content_widget, stretch=1)
        
        main_widget.setLayout(layout)
        self.setCentralWidget(main_widget)
        
        self.show_cpu_name_query()
        
        # 设置全局样式
        self.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
            }
        """)
        
    def on_tab_changed(self, index):
        if index == 0:
            self.show_cpu_name_query()
        elif index == 1:
            self.show_cpu_spec_query()

    def create_query_page(self, fields, table_headers):
        for i in reversed(range(self.content_layout.count())):
            self.content_layout.itemAt(i).widget().setParent(None)
        
        # 左侧搜索
        search_inner_frame = QFrame()
        search_inner_frame.setStyleSheet("""
            QFrame {
                border: 1px solid #ced4da;
                border-radius: 8px;
                background-color: #ffffff;
                box-shadow: 2px 2px 10px #d1d9e6;
            }
        """)
        search_layout = QFormLayout()
        search_layout.setSpacing(10)
        search_layout.setContentsMargins(10, 10, 10, 10)
        
        for field, field_type in fields.items():
            if field_type == "entry":
                entry = QLineEdit()
                entry.setStyleSheet("""
                    QLineEdit {
                        border: 1px solid #ced4da;
                        border-radius: 5px;
                        padding: 5px;
                        background-color: #f8f9fa;
                    }
                    QLineEdit:focus {
                        border: 1px solid #007bff;
                    }
                """)
                search_layout.addRow(f"{field}:", entry)
            elif field_type == "combo":
                combo = QComboBox()
                combo.addItems(["选项1", "选项2", "选项3"])
                combo.setStyleSheet("""
                    QComboBox {
                        border: 1px solid #ced4da;
                        border-radius: 5px;
                        padding: 5px;
                        background-color: #f8f9fa;
                    }
                    QComboBox::drop-down {
                        border-left: 1px solid #ced4da;
                    }
                """)
                search_layout.addRow(f"{field}:", combo)
            elif field_type == "radio":
                radio_frame = QFrame()
                radio_layout = QHBoxLayout()
                radio_yes = QRadioButton("是")
                radio_no = QRadioButton("否")
                radio_layout.addWidget(radio_yes)
                radio_layout.addWidget(radio_no)
                radio_frame.setLayout(radio_layout)
                search_layout.addRow(f"{field}:", radio_frame)
            elif field_type == "check":
                check = QCheckBox("启用")
                check.setStyleSheet("color: #495057;")
                search_layout.addRow(f"{field}:", check)
        
        search_button = QPushButton("查询")
        search_button.setStyleSheet("""
            QPushButton {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #28a745, stop:1 #218838);
                color: white;
                border-radius: 5px;
                padding: 8px;
                font-size: 14px;
                box-shadow: 2px 2px 5px #b8c1cc;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #218838, stop:1 #1e7e34);
            }
        """)
        search_button.clicked.connect(self.perform_search)
        search_layout.addRow(search_button)
        
        search_inner_frame.setLayout(search_layout)
        
        scroll = QScrollArea()
        scroll.setWidget(search_inner_frame)
        scroll.setWidgetResizable(True)
        scroll.setFixedWidth(250)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #e9ecef;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #adb5bd;
                border-radius: 5px;
            }
        """)
        self.content_layout.addWidget(scroll)
        
        # 右侧表格
        self.table = QTableWidget()
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ced4da;
                border-radius: 8px;
                background-color: #ffffff;
                box-shadow: 2px 2px 10px #d1d9e6;
            }
            QTableWidget::item {
                border: 1px solid #ced4da;
                padding: 5px;
            }
            QHeaderView::section {
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e9ecef, stop:1 #d3d7db);
                border: 1px solid #ced4da;
                padding: 5px;
                font-weight: bold;
                color: #212529;
            }
            QScrollBar:vertical, QScrollBar:horizontal {
                border: none;
                background: #e9ecef;
                width: 10px;
                height: 10px;
                margin: 0px;
            }
            QScrollBar::handle {
                background: #adb5bd;
                border-radius: 5px;
            }
        """)
        self.table.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.table.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.table.verticalHeader().setVisible(False)
        self.content_layout.addWidget(self.table, stretch=1)
        
        self.table_headers = table_headers
        
    def perform_search(self):
        sample_data = [
            ["示例1", "Intel", "4", "3.2GHz", "A", "B", "C", "D"],
            ["示例2", "AMD", "6", "3.8GHz", "E", "F", "G", "H"],
            ["示例3", "Intel", "8", "4.0GHz", "I", "J", "K", "L"]
        ]
        
        print("Sample data:", sample_data)
        print("Table headers:", self.table_headers)
        
        if sample_data and len(sample_data) > 0:
            headers = ["属性"] + [f"数据{i+1}" for i in range(len(sample_data))]
            self.table.setColumnCount(len(headers))
            self.table.setRowCount(len(self.table_headers))
            self.table.setHorizontalHeaderLabels(headers)
            
            for row_idx in range(len(self.table_headers)):
                values = [self.table_headers[row_idx]] + [sample_data[col_idx][row_idx] for col_idx in range(len(sample_data))]
                print(f"Row {row_idx} values inserted:", values)
                
                for col_idx, val in enumerate(values):
                    item = QTableWidgetItem(val)
                    item.setTextAlignment(Qt.AlignCenter)
                    if row_idx % 2 == 0:
                        item.setBackground(QColor("#f0f0f0"))
                    else:
                        item.setBackground(QColor("#ffffff"))
                    if row_idx == 0 and col_idx > 1 and val != values[1]:
                        item.setBackground(QColor("#ffcccc"))
                    elif col_idx > 0 and values[1:].count(val) < len(values[1:]):
                        item.setForeground(QColor("red"))
                    self.table.setItem(row_idx, col_idx, item)
            
            self.table.resizeColumnsToContents()
            self.table.resizeRowsToContents()
            print("Table items inserted:", self.table.rowCount(), "rows,", self.table.columnCount(), "columns")
        else:
            print("No data to display")
            self.table.setRowCount(0)
            self.table.setColumnCount(0)
        
    def show_cpu_name_query(self):
        fields = {
            "CPU型号": "entry",
            "制造商": "combo",
            "是否超频": "radio",
            "包含参数": "check"
        }
        headers = ["型号", "制造商", "核心数", "频率", "额外1", "额外2", "额外3", "额外4"]
        self.create_query_page(fields, headers)
        
    def show_cpu_spec_query(self):
        fields = {
            "核心数": "entry",
            "线程数": "entry",
            "制程": "combo",
            "是否支持超线程": "radio"
        }
        headers = ["核心数", "线程数", "缓存", "TDP", "额外1", "额外2", "额外3", "额外4"]
        self.create_query_page(fields, headers)
        
    def logout(self):
        self.current_user = None
        self.setup_login_window()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor("#f8f9fa"))
    palette.setColor(QPalette.WindowText, QColor("#212529"))
    palette.setColor(QPalette.Button, QColor("#007bff"))
    palette.setColor(QPalette.ButtonText, QColor("#ffffff"))
    app.setPalette(palette)
    
    window = QueryClientApp()
    window.show()
    sys.exit(app.exec())


优化一下界面，比如布局更合理一些，表格单元格再大一点

import sys
import os
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                               QLineEdit, QPushButton, QLabel, QTabWidget, QFrame, QTableWidget, QTableWidgetItem,
                               QComboBox, QRadioButton, QCheckBox, QScrollArea, QMessageBox, QSpacerItem, QMenu,
                               QHeaderView)
from PySide6.QtGui import QPalette, QColor, QFont, QIcon, QAction
from PySide6.QtCore import Qt, QSize, QEvent

class UserButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.menu = QMenu(self)
        self.menu.setStyleSheet("""
            QMenu {
                border: 1px solid #ced4da;
                border-radius: 5px;
                background-color: #ffffff;
                padding: 5px;
                box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
                min-width: 120px;
            }
            QMenu::item {
                padding: 8px 25px;
                color: #495057;
                font: 14px;
            }
            QMenu::item:selected {
                background-color: #e9ecef;
                color: #212529;
            }
        """)
        self.setMenu(self.menu)

    def enterEvent(self, event):
        self.showMenu()
        super().enterEvent(event)

class QueryClientApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("信息查询客户端")
        self.setFixedSize(480, 360)
        
        if os.path.exists("custom.png"):
            self.setWindowIcon(QIcon("custom.png"))
            
        self.current_user = None
        self.setup_login_window()

    def setup_login_window(self):
        login_widget = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(40, 20, 40, 40)
        
        # 标题部分
        title = QLabel("信息查询系统")
        title.setFont(QFont("Microsoft YaHei", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #2d3436; margin-bottom: 30px;")
        layout.addWidget(title)
        
        # 表单容器
        form_container = QFrame()
        form_container.setStyleSheet("background: transparent;")
        form_layout = QFormLayout()
        form_layout.setContentsMargins(20, 20, 20, 20)
        form_layout.setVerticalSpacing(15)
        form_layout.setLabelAlignment(Qt.AlignRight)
        
        # 输入字段
        input_style = """
            QLineEdit {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                padding: 10px 15px;
                font-size: 14px;
                background: #ffffff;
            }
            QLineEdit:focus {
                border-color: #4dabf7;
            }
        """
        self.username_entry = QLineEdit()
        self.username_entry.setPlaceholderText("请输入用户名")
        self.username_entry.setStyleSheet(input_style)
        self.password_entry = QLineEdit()
        self.password_entry.setEchoMode(QLineEdit.Password)
        self.password_entry.setPlaceholderText("请输入密码")
        self.password_entry.setStyleSheet(input_style)
        
        form_layout.addRow("用户名：", self.username_entry)
        form_layout.addRow("密码：", self.password_entry)
        
        # 登录按钮
        login_btn = QPushButton("登  录")
        login_btn.setStyleSheet("""
            QPushButton {
                background: #4dabf7;
                color: white;
                border-radius: 8px;
                padding: 12px;
                font-size: 16px;
                font-weight: 500;
                margin-top: 20px;
            }
            QPushButton:hover {
                background: #339af0;
            }
        """)
        login_btn.clicked.connect(self.login)
        
        form_container.setLayout(form_layout)
        layout.addWidget(form_container)
        layout.addWidget(login_btn)
        
        login_widget.setLayout(layout)
        self.setCentralWidget(login_widget)

    def login(self):
        if self.username_entry.text() and self.password_entry.text():
            self.current_user = self.username_entry.text()
            self.show_main_window()
        else:
            QMessageBox.critical(self, "错误", "请输入完整的登录信息")

    def show_main_window(self):
        self.setFixedSize(1200, 800)
        
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 15, 20, 20)
        main_layout.setSpacing(15)
        
        # 顶部工具栏
        header = QHBoxLayout()
        header.addStretch()
        self.user_button = UserButton(self.current_user)
        self.user_button.setStyleSheet("""
            QPushButton {
                background: #f8f9fa;
                color: #495057;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                padding: 8px 20px;
                font: bold 14px;
                min-width: 120px;
            }
            QPushButton:hover {
                background: #e9ecef;
            }
        """)
        self.user_button.menu.addAction(QIcon(":/icons/logout.svg"), "退出登录", self.logout)
        self.user_button.menu.addSeparator()
        self.user_button.menu.addAction("系统设置", lambda: None)
        self.user_button.menu.addAction("关于", self.show_about)
        header.addWidget(self.user_button)
        main_layout.addLayout(header)
        
        # 主内容区
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabBar::tab {
                padding: 12px 20px;
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-bottom: none;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                color: #495057;
                font: 14px;
            }
            QTabBar::tab:selected {
                background: white;
                color: #4dabf7;
                border-color: #e9ecef;
            }
            QTabWidget::pane {
                border: 1px solid #e9ecef;
                background: white;
                border-radius: 8px;
                margin-top: -1px;
            }
        """)
        self.tabs.addTab(QWidget(), "CPU名称查询")
        self.tabs.addTab(QWidget(), "规格参数查询")
        self.tabs.currentChanged.connect(self.on_tab_change)
        main_layout.addWidget(self.tabs)
        
        self.setup_content_area()
        
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        
    def setup_content_area(self):
        # 内容区域使用网格布局
        content = QWidget()
        self.content_layout = QHBoxLayout()
        self.content_layout.setContentsMargins(0, 15, 0, 0)
        self.content_layout.setSpacing(20)
        
        # 左侧查询面板
        self.setup_query_panel()
        
        # 右侧表格区域
        self.table = QTableWidget()
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #e9ecef;
                border-radius: 8px;
                background: white;
                alternate-background-color: #f8f9fa;
            }
            QHeaderView::section {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                padding: 12px;
                font: bold 14px;
                color: #495057;
            }
            QTableWidget::item {
                padding: 15px;
                border: none;
                font: 14px;
            }
        """)
        self.table.verticalHeader().setVisible(False)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setAlternatingRowColors(True)
        self.table.setShowGrid(False)
        
        self.content_layout.addWidget(self.table, stretch=5)
        content.setLayout(self.content_layout)
        self.tabs.currentWidget().setLayout(QVBoxLayout())
        self.tabs.currentWidget().layout().addWidget(content)
        
    def setup_query_panel(self):
        # 查询条件面板
        query_panel = QFrame()
        query_panel.setStyleSheet("background: white; border: 1px solid #e9ecef; border-radius: 8px;")
        query_panel.setFixedWidth(320)
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        
        # 查询条件标题
        title = QLabel("查询条件")
        title.setStyleSheet("font: bold 16px; color: #2d3436; margin-bottom: 15px;")
        layout.addWidget(title)
        
        # 条件输入字段
        self.setup_query_fields(layout)
        
        # 查询按钮
        btn_query = QPushButton("开始查询")
        btn_query.setStyleSheet("""
            QPushButton {
                background: #4dabf7;
                color: white;
                border-radius: 8px;
                padding: 12px;
                font: bold 14px;
                margin-top: 20px;
            }
            QPushButton:hover {
                background: #339af0;
            }
        """)
        btn_query.clicked.connect(self.do_query)
        layout.addWidget(btn_query)
        
        query_panel.setLayout(layout)
        self.content_layout.addWidget(query_panel)
        
    def setup_query_fields(self, layout):
        # 添加示例查询字段
        fields = [
            ("型号名称", QLineEdit()),
            ("制造商", QComboBox()),
            ("核心数", QLineEdit()),
            ("基础频率", QLineEdit())
        ]
        for label, widget in fields:
            hbox = QHBoxLayout()
            hbox.addWidget(QLabel(f"{label}："))
            if isinstance(widget, QComboBox):
                widget.addItems(["Intel", "AMD", "ARM"])
                widget.setStyleSheet("""
                    QComboBox {
                        padding: 8px;
                        border: 2px solid #e9ecef;
                        border-radius: 6px;
                    }
                """)
            else:
                widget.setStyleSheet("padding: 8px; border: 2px solid #e9ecef; border-radius: 6px;")
            hbox.addWidget(widget)
            layout.addLayout(hbox)
        
    def do_query(self):
        # 示例数据
        self.table.setRowCount(5)
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["型号", "制造商", "核心数", "频率"])
        
        for row in range(5):
            for col in range(4):
                item = QTableWidgetItem(f"示例数据{row+1}-{col+1}")
                item.setTextAlignment(Qt.AlignCenter)
                self.table.setItem(row, col, item)
        
        # 调整行高
        for row in range(5):
            self.table.setRowHeight(row, 40)
            
    def on_tab_change(self, index):
        self.setup_content_area()
        
    def show_about(self):
        QMessageBox.information(self, "关于", "信息查询系统 v2.0\n\n技术支持：AI研发中心")
        
    def logout(self):
        self.current_user = None
        self.setup_login_window()
        self.setFixedSize(480, 360)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    
    # 设置全局字体
    font = QFont("Microsoft YaHei", 12)
    app.setFont(font)
    
    window = QueryClientApp()
    window.show()
    sys.exit(app.exec())





import sys
import os
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                               QLineEdit, QPushButton, QLabel, QTabWidget, QFrame, QTableWidget, QTableWidgetItem,
                               QComboBox, QRadioButton, QCheckBox, QScrollArea, QMessageBox, QSpacerItem, QMenu,
                               QHeaderView, QButtonGroup)
from PySide6.QtGui import QPalette, QColor, QFont, QIcon, QAction
from PySide6.QtCore import Qt, QSize, QEvent

# 修复1: 添加缺失的QButtonGroup导入
class UserButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.menu = QMenu(self)
        self.menu.setStyleSheet("""
            QMenu {
                border: 1px solid #ced4da;
                border-radius: 5px;
                background-color: #ffffff;
                padding: 5px;
                /* 修复2: 移除不支持的CSS属性 */
                /* box-shadow: 2px 2px 10px #d1d9e6; */ 
            }
            QMenu::item {
                padding: 5px 20px;
                color: #212529;
            }
            QMenu::item:selected {
                background-color: #007bff;
                color: white;
            }
        """)
        self.setMenu(self.menu)

    def enterEvent(self, event):  # 修复3: 使用正确的事件签名
        super().enterEvent(event)
        self.showMenu()

class QueryClientApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("信息查询客户端")
        self.setFixedSize(1200, 800)  # 修复4: 修正初始窗口尺寸
        
        # 修复5: 使用更可靠的图标路径检测
        icon_path = os.path.join(os.path.dirname(__file__), "custom.png")
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))
        
        self.current_user = None
        self.setup_login_window()

    # ... 保留其他方法不变 ...

    def create_query_page(self, fields, table_headers):
        # 修复6: 清理旧内容更安全的方式
        while self.content_layout.count():
            item = self.content_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        # 修复7: 完善表单控件创建
        search_inner_frame = QFrame()
        search_layout = QFormLayout()
        
        for field, field_type in fields.items():
            if field_type == "radio":
                radio_group = QButtonGroup(self)  # 修复8: 添加按钮组管理单选
                hbox = QHBoxLayout()
                for text in ["是", "否"]:
                    radio = QRadioButton(text)
                    radio_group.addButton(radio)
                    hbox.addWidget(radio)
                search_layout.addRow(f"{field}:", hbox)
            elif field_type == "check":
                check = QCheckBox("启用")
                search_layout.addRow(f"{field}:", check)
            # ... 其他字段处理保持原样 ...

    def perform_search(self):
        # 修复9: 确保表头和数据一致性
        sample_data = [
            ["i7-12700K", "Intel", "12", "3.6GHz"],
            ["Ryzen 9 5950X", "AMD", "16", "3.4GHz"]
        ]
        headers = ["型号", "制造商", "核心数", "基础频率"]  # 与实际数据列数匹配
        
        self.table.setColumnCount(len(headers))
        self.table.setHorizontalHeaderLabels(headers)
        self.table.setRowCount(len(sample_data))

        # 修复10: 安全的数据填充方式
        for row, data in enumerate(sample_data):
            for col, value in enumerate(data):
                item = QTableWidgetItem(str(value))
                item.setTextAlignment(Qt.AlignCenter)
                self.table.setItem(row, col, item)

    # 修复11: 添加缺失的槽函数
    def on_tab_changed(self, index):
        if index == 0:
            self.show_cpu_name_query()
        elif index == 1:
            self.show_cpu_spec_query()

    # 修复12: 添加缺失的退出登录功能
    def logout(self):
        self.current_user = None
        self.setup_login_window()
        self.resize(480, 360)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    # 修复13: 设置更合理的默认字体
    font = QFont("Microsoft YaHei", 10)
    app.setFont(font)
    
    window = QueryClientApp()
    window.show()
    sys.exit(app.exec())

