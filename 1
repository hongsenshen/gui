import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
                               QPushButton, QLabel, QTableView, QMenu, QCheckBox, QTabWidget, QComboBox, QGroupBox)
from PySide6.QtGui import QFont, QColor, QPalette, QStandardItem, QStandardItemModel
from PySide6.QtCore import Qt, Slot, QTimer, QHeaderView, Signal

# 公共样式定义
STYLES = {
    "group_box": """
        QGroupBox {
            font: bold 14px "Microsoft YaHei";
            color: #374151;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            margin-top: 10px;
            padding: 10px;
            background: #ffffff;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top left;
            padding: 0 5px;
            background: #ffffff;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            margin-left: 5px;
        }
    """,
    "button": """
        QPushButton {
            background: #0078d4;
            color: white;
            padding: 12px 24px;
            border-radius: 6px;
            font: bold 16px "Microsoft YaHei";
        }
        QPushButton:hover { background: #005ba1; }
    """,
    "input": """
        padding: 8px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        font-size: 14px;
    """,
    "combo_box": """
        QComboBox {
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            font-size: 14px;
            background: #ffffff;
            color: #374151;
        }
        QComboBox:hover {
            border: 1px solid #0078d4;
            background: #f3f4f6;
        }
        QComboBox::drop-down {
            border: none;
            width: 20px;
        }
        QComboBox QAbstractItemView {
            border: 1px solid #d1d5db;
            background: #ffffff;
            color: #374151;
            selection-background-color: #dbeafe;
            selection-color: #1f2937;
        }
    """,
    "tab_widget": """
        QTabWidget::pane {
            border: 1px solid #e5e7eb;
            background: #ffffff;
            border-radius: 8px;
        }
        QTabBar::tab {
            background: #e5e7eb;
            border: 1px solid #d1d5db;
            padding: 12px 24px;
            font: bold 16px "Microsoft YaHei";
            color: #6b7280;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            margin-right: 2px;
        }
        QTabBar::tab:selected {
            background: #ffffff;
            border-bottom: none;
            color: #0078d4;
        }
    """,
    "table": """
        QTableView {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            background: #ffffff;
            font-size: 14px;
        }
        QHeaderView::section {
            background: #f3f4f6;
            padding: 12px;
            border: 1px solid #e5e7eb;
            font: bold 14px "Microsoft YaHei";
            color: #374151;
        }
    """,
    "menu": """
        QMenu {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #eff6ff, stop:1 #dbeafe);
            border: 1px solid #bfdbfe;
            border-radius: 6px;
            padding: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        QMenu::item {
            padding: 8px 16px;
            color: #1f2937;
            font: 14px "Microsoft YaHei";
            background: transparent;
        }
        QMenu::item:selected {
            background: #93c5fd;
            color: #1f2937;
            border-radius: 4px;
        }
    """,
    "user_button": """
        QPushButton {
            background: #ffffff;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            padding: 8px 16px;
            font: 14px "Microsoft YaHei";
            color: #374151;
        }
        QPushButton:hover { background: #f3f4f6; }
    """
}

# -------------------- 窗口管理器 --------------------
class WindowManager:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(WindowManager, cls).__new__(cls)
            cls.windows = {}
            cls.current_window = None
        return cls._instance

    def register_window(self, name, window_class, *args, **kwargs):
        if name not in self.windows:
            self.windows[name] = window_class(*args, **kwargs)
        return self.windows[name]

    def switch_to(self, name, data=None):
        if name in self.windows:
            new_window = self.windows[name]
            if self.current_window:
                self.current_window.hide()
            if data:
                new_window.set_data(data)
            new_window.move(self.current_window.pos() if self.current_window else new_window.pos())
            new_window.show()
            QTimer.singleShot(50, lambda: (new_window.raise_(), new_window.activateWindow()))
            print(f"切换到窗口: {name}")
            self.current_window = new_window
        else:
            print(f"窗口 {name} 未注册")

    def get_window(self, name):
        return self.windows.get(name)

# -------------------- 窗口基类 --------------------
class BaseWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.manager = WindowManager()

    def set_data(self, data):
        pass

    def closeEvent(self, event):
        if not any(w.isVisible() for w in self.manager.windows.values()):
            event.accept()
        else:
            event.ignore()
            self.hide()

# -------------------- 通用工具函数 --------------------
def create_grouped_form(title, fields, parent_layout, input_widgets, button_text=None, button_signal=None):
    """创建带标题的表单区域，可选添加按钮"""
    form = QGroupBox(title)
    form.setStyleSheet(STYLES["group_box"])
    form_layout = QVBoxLayout()
    form_layout.setSpacing(15)
    
    for field, config in fields.items():
        hbox = QHBoxLayout()
        label = QLabel(f"{config['label']}：")
        label.setStyleSheet("font-size: 14px; color: #374151;")
        if config["type"] == "text":
            widget = QLineEdit()
            widget.setPlaceholderText(config.get("placeholder", ""))
            widget.setStyleSheet(STYLES["input"])
            widget.setFixedWidth(300)
            if config.get("password"):
                widget.setEchoMode(QLineEdit.Password)
        elif config["type"] == "combo":
            widget = QComboBox()
            widget.addItems(config["items"])
            widget.setStyleSheet(STYLES["combo_box"])
            widget.setFixedWidth(300)
        elif config["type"] == "checkbox":
            widget = QCheckBox(config["label"])
            widget.setStyleSheet("font-size: 14px; color: #374151;")
            hbox.addWidget(widget)
            input_widgets[field] = widget
            form_layout.addLayout(hbox)
            continue
        input_widgets[field] = widget
        hbox.addWidget(label)
        hbox.addWidget(widget)
        hbox.addStretch()
        form_layout.addLayout(hbox)
    
    if button_text and button_signal:
        btn = QPushButton(button_text)
        btn.setStyleSheet(STYLES["button"])
        btn.clicked.connect(button_signal)
        form_layout.addWidget(btn, alignment=Qt.AlignLeft)
    
    form.setLayout(form_layout)
    parent_layout.addWidget(form)
    return form

# -------------------- 登录窗口 --------------------
class LoginWindow(BaseWindow):
    login_signal = Signal()  # 定义登录信号

    def __init__(self):
        super().__init__()
        self.setWindowTitle("登录 - CPU信息查询系统")
        self.input_widgets = {}
        self._setup_ui()
        self.login_signal.connect(self._on_login_clicked)

    def _setup_ui(self):
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addStretch()

        title = QLabel("CPU信息查询系统")
        title.setFont(QFont("Microsoft YaHei", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        fields = {
            "username": {"label": "用户名", "type": "text", "placeholder": "请输入用户名"},
            "password": {"label": "密码", "type": "text", "placeholder": "请输入密码", "password": True}
        }
        create_grouped_form("登录信息", fields, layout, self.input_widgets, "登录系统", self.login_signal.emit)

        layout.addStretch()
        widget.setLayout(layout)
        widget.setStyleSheet("background: #f0f2f5;")
        self.setCentralWidget(widget)

        self.setMinimumSize(1280, 720)
        self.setMaximumSize(1280, 720)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowMaximizeButtonHint)

    @Slot()
    def _on_login_clicked(self):
        username = self.input_widgets["username"].text()
        password = self.input_widgets["password"].text()
        if username and password == "123456":
            self.manager.switch_to("main", data={"username": username})
        else:
            print("登录失败")

# -------------------- 主窗口 --------------------
class MainWindow(BaseWindow):
    query_signal = Signal(dict)  # 定义查询信号

    def __init__(self):
        super().__init__()
        self.username = "管理员"
        self.setWindowTitle("CPU信息查询系统")
        self.input_widgets = {}
        self._setup_ui()
        self.query_signal.connect(self._on_query)

    def _setup_ui(self):
        widget = QWidget()
        layout = QVBoxLayout()

        # 顶部工具栏
        self.header = QHBoxLayout()
        self.header.addStretch()
        self.btn_user = UserButton(self.username)
        self.btn_user.menu.addAction("设置", self._open_settings)
        self.btn_user.menu.addAction("退出登录", self._handle_logout)
        self.header.addWidget(self.btn_user)
        layout.addLayout(self.header)

        # 主内容区域
        content_layout = QHBoxLayout()

        # 左侧查询模块
        self.query_group = QGroupBox("查询条件")
        self.query_layout = QVBoxLayout()
        self.query_layout.setSpacing(15)

        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet(STYLES["tab_widget"])
        
        name_tab = self._create_query_tab("name_query", {
            "model": {"label": "型号名称", "type": "text", "placeholder": "输入型号关键字"},
            "vendor": {"label": "制造商", "type": "combo", "items": ["全部", "Intel", "AMD", "ARM"]}
        }, self._handle_name_query)
        self.tab_widget.addTab(name_tab, "型号查询")

        spec_tab = self._create_query_tab("spec_query", {
            "cores": {"label": "核心数", "type": "text", "placeholder": "输入最小核心数"},
            "tdp": {"label": "最大TDP", "type": "combo", "items": ["全部", "35W", "65W", "95W"]}
        }, self._handle_spec_query)
        self.tab_widget.addTab(spec_tab, "规格查询")

        self.query_group.setLayout(self.query_layout)
        self.query_group.setFixedWidth(350)
        content_layout.addWidget(self.query_group)

        # 右侧表格
        self.table = QTableView()
        self.model = QStandardItemModel()
        self.table.setModel(self.model)
        self._init_table()
        content_layout.addWidget(self.table, stretch=1)

        layout.addLayout(content_layout, stretch=1)
        widget.setLayout(layout)
        widget.setStyleSheet("background: #f0f2f5;")
        self.setCentralWidget(widget)

        self.resize(1280, 720)
        self.setMinimumSize(800, 600)

    def _create_query_tab(self, name, fields, query_handler):
        tab = QWidget()
        tab_layout = QVBoxLayout()
        create_grouped_form("", fields, self.query_layout, self.input_widgets, "查询", lambda: self.query_signal.emit(self._collect_conditions()))
        tab.setLayout(tab_layout)
        setattr(self, f"{name}_table", self.table)
        return tab

    def _init_table(self):
        self.model.clear()
        self.model.setRowCount(1)
        self.model.setColumnCount(1)
        placeholder = QStandardItem("数据为空")
        placeholder.setTextAlignment(Qt.AlignCenter)
        self.model.setItem(0, 0, placeholder)
        self.table.horizontalHeader().hide()
        self.table.verticalHeader().hide()
        self.table.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.table.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.verticalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table.setStyleSheet(STYLES["table"])

    def set_data(self, data):
        if "username" in data:
            self.username = data["username"]
            self.btn_user.setText(self.username)

    def _collect_conditions(self):
        return {field: widget.text() if isinstance(widget, QLineEdit) else widget.currentText()
                for field, widget in self.input_widgets.items()}

    @Slot(dict)
    def _on_query(self, conditions):
        if "model" in conditions:
            self._handle_name_query(conditions)
        elif "cores" in conditions:
            self._handle_spec_query(conditions)

    def _handle_name_query(self, conditions):
        sample_data = [
            ["i7-12700K", "Intel", "12", "3.6GHz", "125W"],
            ["Ryzen 9 5950X", "AMD", "16", "3.4GHz", "105W"],
            ["Cortex-A78", "ARM", "8", "2.8GHz", "35W"]
        ]
        self._update_table(sample_data)

    def _handle_spec_query(self, conditions):
        sample_data = [
            ["i5-12600K", "Intel", "10", "3.7GHz", "125W"],
            ["Ryzen 7 5800X", "AMD", "8", "3.8GHz", "105W"],
            ["Cortex-A76", "ARM", "4", "2.4GHz", "25W"]
        ]
        self._update_table(sample_data)

    def _update_table(self, data):
        self.model.clear()
        headers = ["型号", "制造商", "核心数", "基础频率", "TDP"]
        self.model.setVerticalHeaderLabels(headers)
        self.model.setRowCount(len(headers))
        self.model.setColumnCount(len(data))
        self.model.beginInsertRows(self.model.index(0, 0), 0, len(headers) - 1)
        for col, row_data in enumerate(data):
            for row, value in enumerate(row_data):
                item = QStandardItem(value)
                item.setTextAlignment(Qt.AlignCenter)
                if "Intel" in value:
                    item.setBackground(QColor("#dbeafe"))
                elif "AMD" in value:
                    item.setBackground(QColor("#fee2e2"))
                elif "ARM" in value:
                    item.setBackground(QColor("#d1fae5"))
                elif "GHz" in value:
                    item.setBackground(QColor("#fef3c7"))
                self.model.setItem(row, col, item)
        self.model.endInsertRows()

    @Slot()
    def _open_settings(self):
        self.manager.switch_to("settings")

    @Slot()
    def _handle_logout(self):
        self.manager.switch_to("login")

# -------------------- 设置窗口 --------------------
class SettingsWindow(BaseWindow):
    save_signal = Signal()  # 定义保存信号

    def __init__(self):
        super().__init__()
        self.setWindowTitle("设置 - CPU信息查询系统")
        self.input_widgets = {}
        self._setup_ui()
        self.save_signal.connect(self._save_settings)

    def _setup_ui(self):
        widget = QWidget()
        layout = QVBoxLayout()

        title = QLabel("设置")
        title.setFont(QFont("Microsoft YaHei", 18, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        fields = {"dark_mode": {"label": "启用暗黑模式", "type": "checkbox"}}
        create_grouped_form("设置选项", fields, layout, self.input_widgets, "保存并返回", self.save_signal.emit)

        layout.addStretch()
        widget.setLayout(layout)
        widget.setStyleSheet("background: #f9fafb;")
        self.setCentralWidget(widget)

        self.resize(800, 600)
        self.setMinimumSize(400, 300)

    @Slot()
    def _save_settings(self):
        print(f"暗黑模式: {self.input_widgets['dark_mode'].isChecked()}")
        self.manager.switch_to("main")

# -------------------- 用户按钮类 --------------------
class UserButton(QPushButton):
    def __init__(self, username, parent=None):
        super().__init__(username, parent)
        self.menu = QMenu(self)
        self.menu.setStyleSheet(STYLES["menu"])
        self.setStyleSheet(STYLES["user_button"])
        self.setMenu(self.menu)

    def enterEvent(self, event):
        self.showMenu()
        super().enterEvent(event)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("fusion")
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor("#f0f2f5"))
    palette.setColor(QPalette.WindowText, QColor("#1f2937"))
    palette.setColor(QPalette.Base, QColor("#ffffff"))
    palette.setColor(QPalette.AlternateBase, QColor("#f9fafb"))
    palette.setColor(QPalette.Text, QColor("#374151"))
    palette.setColor(QPalette.Button, QColor("#0078d4"))
    palette.setColor(QPalette.ButtonText, QColor("#ffffff"))
    palette.setColor(QPalette.Highlight, QColor("#dbeafe"))
    app.setPalette(palette)
    app.setFont(QFont("Microsoft YaHei", 12))
    
    manager = WindowManager()
    manager.register_window("login", LoginWindow)
    manager.register_window("main", MainWindow)
    manager.register_window("settings", SettingsWindow)
    
    login_win = manager.get_window("login")
    login_win.show()
    QTimer.singleShot(50, lambda: login_win.raise_())
    manager.current_window = login_win
    
    sys.exit(app.exec())
