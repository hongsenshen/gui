def create_query_page(self, fields, table_headers):
    """创建带对比功能的查询页面"""
    for widget in self.content_frame.winfo_children():
        widget.destroy()

    # ======================
    # 左侧搜索和结果区域（保持不变）
    # ======================
    # [原有左侧区域代码保持不变]

    # ======================
    # 右侧对比区域
    # ======================
    # 创建样式
    style = ttk.Style()
    style.configure("Cell.TLabel", borderwidth=1, relief="solid", padding=5, background="white")
    style.configure("Header.TLabel", borderwidth=1, relief="solid", padding=5, 
                   font=("Helvetica", 9, "bold"), background="#f0f0f0")

    compare_container = ttk.Frame(self.content_frame)
    compare_container.pack(side=RIGHT, expand=True, fill=BOTH, padx=5, pady=5)

    # 固定列容器（初始隐藏）
    self.fixed_frame = ttk.Frame(compare_container, width=120)
    self.fixed_headers = table_headers[:3]  # 取前3个字段作为固定列
    
    # 滚动区域容器
    scroll_container = ttk.Frame(compare_container)
    scroll_container.pack(side=LEFT, expand=True, fill=BOTH)

    # 创建画布和滚动条
    self.compare_canvas = tk.Canvas(scroll_container, highlightthickness=0)
    scroll_x = ttk.Scrollbar(scroll_container, orient=HORIZONTAL, command=self.compare_canvas.xview)
    self.compare_canvas.configure(xscrollcommand=scroll_x.set)

    # 内部框架（使用网格布局）
    self.compare_inner_frame = ttk.Frame(self.compare_canvas)
    self.compare_canvas.create_window((0, 0), window=self.compare_inner_frame, anchor="nw")

    # 布局
    scroll_x.pack(side=BOTTOM, fill=X)
    self.compare_canvas.pack(side=TOP, expand=True, fill=BOTH)

    # 初始化网格布局
    for row in range(len(self.fixed_headers)):
        self.compare_inner_frame.grid_rowconfigure(row, weight=1)
        ttk.Label(self.fixed_frame, 
                 text=self.fixed_headers[row],
                 style="Header.TLabel",
                 anchor="center").grid(row=row, column=0, sticky="nsew")

    # 绑定配置事件
    self.compare_inner_frame.bind("<Configure>", 
        lambda e: self.compare_canvas.configure(scrollregion=self.compare_canvas.bbox("all")))

    # 存储对比项
    self.compare_items = []

    # ======================
    # 其他原有代码保持不变
    # ======================
在add_to_compare方法中添加以下逻辑：

def add_to_compare(self, item_data):
    """添加项目到对比列表（表格样式）"""
    # 首次添加时显示固定列
    if not self.compare_items:
        self.fixed_frame.pack(side=LEFT, fill=Y)
    
    # 创建新列
    column_index = len(self.compare_items)
    
    # 添加数据列
    for row, header in enumerate(self.fixed_headers):
        value = item_data.get(header, "N/A")
        lbl = ttk.Label(self.compare_inner_frame,
                       text=value,
                       style="Cell.TLabel",
                       anchor="center")
        lbl.grid(row=row, column=column_index, sticky="nsew")
    
    # 添加操作按钮
    btn_frame = ttk.Frame(self.compare_inner_frame)
    btn_frame.grid(row=len(self.fixed_headers), column=column_index, sticky="nsew")
    
    ttk.Button(btn_frame, 
              text="移除",
              style="danger.TButton",
              command=lambda c=column_index: self.remove_compare_item(c)
              ).pack(pady=5)
    
    # 配置列权重
    self.compare_inner_frame.grid_columnconfigure(column_index, weight=1)
    self.compare_items.append(item_data)

def remove_compare_item(self, column_index):
    """移除指定列的对比项"""
    # 删除对应列的所有组件
    for widget in self.compare_inner_frame.grid_slaves(column=column_index):
        widget.destroy()
    
    # 更新后续列的位置
    for col in range(column_index+1, len(self.compare_items)):
        for widget in self.compare_inner_frame.grid_slaves(column=col):
            widget.grid_configure(column=col-1)
    
    # 删除数据
    del self.compare_items[column_index]
    
    # 如果全部删除则隐藏固定列
    if not self.compare_items:
        self.fixed_frame.pack_forget()
