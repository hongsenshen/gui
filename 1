import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QLineEdit, QTableView, QMenu, QAction, QPushButton, QCheckBox, QWidgetAction)
from PySide6.QtGui import QStandardItemModel, QStandardItem, QColor, QFont, QCursor
from PySide6.QtCore import Qt, QPoint

# 预定义电脑配置池
computers_pool = {
    "Dell XPS 13": {"品牌": "Dell", "CPU": "Intel i7-12700", "内存": "16GB", "硬盘": "512GB SSD", "显卡": "Intel Iris Xe", "价格": "12000"},
    "HP Spectre x360": {"品牌": "HP", "CPU": "Intel i5-12350", "内存": "8GB", "硬盘": "256GB SSD", "显卡": "Intel UHD", "价格": "9000"},
    "Lenovo ThinkPad X1": {"品牌": "Lenovo", "CPU": "AMD Ryzen 7", "内存": "32GB", "硬盘": "1TB SSD", "显卡": "AMD Radeon", "价格": "15000"},
    "Dell Inspiron 15": {"品牌": "Dell", "CPU": "Intel i3-11150", "内存": "8GB", "硬盘": "1TB HDD", "显卡": "Intel UHD", "价格": "6000"}
}

# 可选参数
options = {
    "品牌": sorted(set(comp["品牌"] for comp in computers_pool.values())),
    "CPU": sorted(set(comp["CPU"] for comp in computers_pool.values())),
    "内存": ["8GB", "16GB", "32GB"],
    "硬盘": ["256GB SSD", "512GB SSD", "1TB SSD", "1TB HDD"],
    "显卡": ["Intel UHD", "Intel Iris Xe", "AMD Radeon"]
}

class MultiSelectMenu(QMenu):
    def __init__(self, items, selected_items, callback, parent=None):
        super().__init__(parent)
        self.selected_items = selected_items.copy()
        self.callback = callback
        for item in items:
            checkbox = QCheckBox(item)
            checkbox.setChecked(item in self.selected_items)
            checkbox.stateChanged.connect(lambda state, i=item: self.toggle_item(i, state))
            widget_action = QWidgetAction(self)
            widget_action.setDefaultWidget(checkbox)
            self.addAction(widget_action)
        self.setStyleSheet("QMenu { menu-scrollable: 1; }")

    def toggle_item(self, item, state):
        if state == Qt.Checked and item not in self.selected_items:
            self.selected_items.append(item)
        elif state == Qt.Unchecked and item in self.selected_items:
            self.selected_items.remove(item)
        self.callback(self.selected_items)

class SingleSelectMenu(QMenu):
    def __init__(self, items, selected_items, callback, parent=None):
        super().__init__(parent)
        self.selected_items = selected_items.copy()
        self.callback = callback
        for item in items:
            action = QAction(item, self, checkable=True)
            action.setChecked(item in self.selected_items)
            action.triggered.connect(lambda checked, i=item: self.toggle_item(i, checked))
            self.addAction(action)
        self.setStyleSheet("QMenu { menu-scrollable: 1; }")

    def toggle_item(self, item, checked):
        if checked:
            self.selected_items = [item]  # 单选，覆盖之前的选择
        elif item in self.selected_items:
            self.selected_items.clear()
        for action in self.actions():
            action.setChecked(action.text() in self.selected_items)
        self.callback(self.selected_items)

class ComparisonWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("电脑配置对比工具")
        self.setGeometry(100, 100, 1000, 600)

        # 主布局
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # 搜索模块
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("点击选择筛选条件...")
        self.search_input.setReadOnly(True)
        self.search_input.mousePressEvent = self.show_filter_menu
        layout.addWidget(self.search_input)

        # 条件框布局
        self.filters_layout = QHBoxLayout()
        layout.addLayout(self.filters_layout)

        # 表格视图
        self.model = QStandardItemModel()
        self.table_view = QTableView()
        self.table_view.setModel(self.model)
        self.table_view.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout.addWidget(self.table_view)

        # 筛选条件存储
        self.filters = {}

    def show_filter_menu(self, event):
        menu = QMenu(self)
        for param, items in options.items():
            if param not in self.filters:  # 未选择的参数
                action = QAction(param, self)
                if param == "品牌":
                    action.setMenu(MultiSelectMenu(items, self.filters.get(param, []), 
                                                  lambda selected, p=param: self.apply_filter(p, selected), self))
                else:
                    action.setMenu(SingleSelectMenu(items, self.filters.get(param, []), 
                                                   lambda selected, p=param: self.apply_filter(p, selected), self))
                menu.addAction(action)
        # 编辑已有条件
        if self.filters:
            edit_menu = menu.addMenu("编辑已有条件")
            for param in self.filters.keys():
                action = QAction(param, self)
                if param == "品牌":
                    action.setMenu(MultiSelectMenu(options[param], self.filters.get(param, []), 
                                                  lambda selected, p=param: self.apply_filter(p, selected), self))
                else:
                    action.setMenu(SingleSelectMenu(options[param], self.filters.get(param, []), 
                                                   lambda selected, p=param: self.apply_filter(p, selected), self))
                edit_menu.addAction(action)
        menu.exec(QCursor.pos())

    def apply_filter(self, param, selected):
        if selected:
            self.filters[param] = selected
        elif param in self.filters:
            del self.filters[param]
        self.update_filters_display()
        self.generate_comparison()

    def update_filters_display(self):
        # 更新输入框
        filter_text = " | ".join(f"{param}: {', '.join(values)}" for param, values in self.filters.items())
        self.search_input.setText(filter_text if filter_text else "点击选择筛选条件...")

        # 更新条件框
        for i in reversed(range(self.filters_layout.count())):
            self.filters_layout.itemAt(i).widget().deleteLater()
        
        for param, values in self.filters.items():
            tag_widget = QWidget()
            tag_layout = QHBoxLayout(tag_widget)
            tag_layout.setContentsMargins(2, 2, 2, 2)
            label = QPushButton(f"{param}: {', '.join(values)}")
            label.setFlat(True)
            label.clicked.connect(lambda checked, p=param: self.reselect_filter(p))
            label.setToolTip("点击重新选择")
            remove_btn = QPushButton("x")
            remove_btn.setFixedSize(20, 20)
            remove_btn.clicked.connect(lambda checked, p=param: self.remove_filter(p))
            tag_layout.addWidget(label)
            tag_layout.addWidget(remove_btn)
            tag_widget.setStyleSheet("background-color: #e0e0e0; border-radius: 5px; padding: 2px;")
            self.filters_layout.addWidget(tag_widget)

    def reselect_filter(self, param):
        if param == "品牌":
            menu = MultiSelectMenu(options[param], self.filters.get(param, []), 
                                  lambda selected, p=param: self.apply_filter(p, selected), self)
        else:
            menu = SingleSelectMenu(options[param], self.filters.get(param, []), 
                                   lambda selected, p=param: self.apply_filter(p, selected), self)
        menu.exec(QCursor.pos())

    def remove_filter(self, param):
        if param in self.filters:
            del self.filters[param]
            self.update_filters_display()
            self.generate_comparison()

    def generate_comparison(self):
        filtered_computers = {}
        for name, attrs in computers_pool.items():
            match = True
            for param, values in self.filters.items():
                if attrs[param] not in values:
                    match = False
                    break
            if match:
                filtered_computers[name] = attrs

        # 设置纵向表格
        self.model.clear()
        headers = ["参数"] + list(filtered_computers.keys())
        self.model.setHorizontalHeaderLabels(headers)
        attrs_order = ["品牌", "CPU", "内存", "硬盘", "显卡", "价格"]
        for row, attr in enumerate(attrs_order):
            items = [QStandardItem(attr)]
            items[0].setFont(QFont("Arial", 10, QFont.Bold))
            items[0].setForeground(QColor("#333333"))
            for comp_attrs in filtered_computers.values():
                items.append(QStandardItem(comp_attrs.get(attr, "")))
            self.model.appendRow(items)

        # 高亮差异值
        self.highlight_differences()

    def highlight_differences(self):
        if self.model.rowCount() == 0 or self.model.columnCount() <= 2:
            return
        
        for row in range(self.model.rowCount()):
            values = [self.model.item(row, col).text() for col in range(1, self.model.columnCount())]
            if len(set(values)) > 1:
                for col in range(1, self.model.columnCount()):
                    self.model.item(row, col).setBackground(QColor("#FFFF99"))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet("""
        QTableView { border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9; }
        QLineEdit { padding: 5px; border: 1px solid #ddd; border-radius: 5px; }
        QPushButton { padding: 2px; }
        QPushButton:flat { background: none; border: none; }
    """)
    window = ComparisonWindow()
    window.show()
    sys.exit(app.exec())
